#!/usr/bin/env bash

TMP_SYSTEM_PACMAN_PACKAGES=$(mktemp /tmp/pacman_pkgs_XXX)
TMP_SYSTEM_AUR_PACKAGES=$(mktemp /tmp/aur_pkgs_XXX)
TMP_PACMAN_CONFIG=$(mktemp /tmp/pacman_pkgs_config_XXX)
TMP_AUR_CONFIG=$(mktemp /tmp/aur_pkgs_config_XXX)

MIRROR_DIR=${MIRROR_DIR:-$HOME/.local/share/mirror/}

trap cleanup RETURN EXIT

function help() {
  cat <<EOF
Declare installed programs in Arch Linux

Usage:
  mirror FLAG <FLAG_INPUT>
  mirror -h |  help

Flags:
  -h, --help                 Displays this message and exits

Example:
  mirror -p artix
EOF
}

function cleanup() {
  rm "$TMP_SYSTEM_PACMAN_PACKAGES" "$TMP_SYSTEM_AUR_PACKAGES" "$TMP_PACMAN_CONFIG" "$TMP_AUR_CONFIG" &>/dev/null
}

function filterAurPrograms() {
  local tmp_file
  tmp_file=$(mktemp /tmp/pacman_tmp_XXX)
  pacman -Qqe >"$tmp_file"
  # shellcheck disable=SC2024
  sudo pacman -S - <"$tmp_file" 2>&1 | sort -u | rg "error:" | awk '{print $5}' >"$TMP_SYSTEM_AUR_PACKAGES"
  comm -23 "$tmp_file" "$TMP_SYSTEM_AUR_PACKAGES" >"$TMP_SYSTEM_PACMAN_PACKAGES"
  rm "$tmp_file"
}

function readConfig() {
  local pacman_files tmp_file
  local package=$1 # pacman, aur, flatpak
  tmp_file=$(mktemp /tmp/pacman_tmp_XXX)

  [[ ! -d "$MIRROR_DIR/profile" ]] && mkdir -p "$MIRROR_DIR/profile"

  mapfile -t pacman_files < <(find -L "$MIRROR_DIR/profile" -type f -iname "*.$package")

  [[ ${#pacman_files[@]} -eq 0 ]] && return 1

  cat "${pacman_files[@]}" |
    sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/#.*$//' |
    grep -v '^$' |
    sort -u >"$tmp_file"

  case "$package" in
  pacman)
    mv "$tmp_file" "$TMP_PACMAN_CONFIG"
    ;;
  aur)
    mv "$tmp_file" "$TMP_AUR_CONFIG"
    ;;
  esac

  return 0
}

function installPacman() {
  local pkgs
  pkgs=$(comm -23 "$TMP_PACMAN_CONFIG" "$TMP_SYSTEM_PACMAN_PACKAGES")
  echo "$(tput setaf 82)Installing pacman packages$(tput sgr0)"

  # shellcheck disable=SC2086
  [[ -n "$pkgs" ]] && {
    sudo pacman -S --needed $pkgs || true
    return 0
  }
  echo " there is nothing to do"
}

function removePackages() {
  local pkgs tmp_file
  local package=$2

  case "$package" in
  pacman)
    pkgs=$(comm -13 "$TMP_PACMAN_CONFIG" "$TMP_SYSTEM_PACMAN_PACKAGES")
    ;;
  aur)
    pkgs=$(comm -13 "$TMP_AUR_CONFIG" "$TMP_SYSTEM_AUR_PACKAGES")
    ;;
  esac

  echo -e "$(tput setaf 82)\nRemoving unused $package packages$(tput sgr0)"
  # shellcheck disable=SC2086
  [[ -n "$pkgs" ]] && {
    sudo pacman -Rns $pkgs || true
    return 0
  }
  echo " there is nothing to do"
}

function installAur() {
  local pkgs
  pkgs=$(comm -23 "$TMP_AUR_CONFIG" "$TMP_SYSTEM_AUR_PACKAGES")
  echo -e "$(tput setaf 82)\nInstalling AUR packages$(tput sgr0)"

  # shellcheck disable=SC2086
  [[ -n "$pkgs" ]] && {
    paru -Sa $pkgs || true
    return 0
  }
  echo " there is nothing to do"
}

function main() {
  [[ ! -d "$MIRROR_DIR" ]] && mkdir -p "$MIRROR_DIR"

  filterAurPrograms
  readConfig pacman && installPacman
  readConfig aur && installAur
  removePackages 13 pacman
  removePackages 13 aur
}

while getopts ":h-" opt; do
  case "$opt" in
  h)
    help
    exit 0
    ;;
  -)
    break
    ;;
  ?)
    echo -e "$(tput setaf 192)Error: Invalid option '-$OPTARG'$(tput sgr0)" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

while [[ $# -gt 0 ]]; do
  case "$1" in
  --help)
    help
    exit 0
    ;;
  *)
    break
    ;;
  esac
done

main
